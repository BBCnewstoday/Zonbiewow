- possible names :
	- item mastery : the more you loot it, the better it becomes
	- socket any item -> would be called a bug
	
- make UI to :
	- place an item in a slot
	- add a reforge button
	- show reforge price based on current strength
	
- server side :
	- detect current item prefixes and suffixes
	- select the next level of strenght
	- calculate price based on current status. Price should require same type of item. 
	- upgrade chance could be based on the number of items sacrificed to upgrade. 100 items = 10% chance ?
	
		ITEM_FIELD_RANDOM_PROPERTIES_ID	- ITEM_FIELD_PROPERTY_SEED
		MAX_INSPECTED_ENCHANTMENT_SLOT - 7
		PERM_ENCHANTMENT_SLOT           = 0,
		TEMP_ENCHANTMENT_SLOT           = 1,
		SOCK_ENCHANTMENT_SLOT           = 2,
		SOCK_ENCHANTMENT_SLOT_2         = 3,
		SOCK_ENCHANTMENT_SLOT_3         = 4,
		BONUS_ENCHANTMENT_SLOT          = 5,
		PRISMATIC_ENCHANTMENT_SLOT      = 6,                    // added at apply special permanent enchantment
		MAX_INSPECTED_ENCHANTMENT_SLOT  = 7,
		PROP_ENCHANTMENT_SLOT_0         = 7,                    // used with RandomSuffix
		PROP_ENCHANTMENT_SLOT_1         = 8,                    // used with RandomSuffix
		PROP_ENCHANTMENT_SLOT_2         = 9,                    // used with RandomSuffix and RandomProperty
		PROP_ENCHANTMENT_SLOT_3         = 10,                   // used with RandomProperty
		PROP_ENCHANTMENT_SLOT_4         = 11,                   // used with RandomProperty
		
enum ItemEnchantmentType
{
    ITEM_ENCHANTMENT_TYPE_NONE             = 0,
    ITEM_ENCHANTMENT_TYPE_COMBAT_SPELL     = 1,
    ITEM_ENCHANTMENT_TYPE_DAMAGE           = 2,
    ITEM_ENCHANTMENT_TYPE_EQUIP_SPELL      = 3,
    ITEM_ENCHANTMENT_TYPE_RESISTANCE       = 4,
    ITEM_ENCHANTMENT_TYPE_STAT             = 5,
    ITEM_ENCHANTMENT_TYPE_TOTEM            = 6,
    ITEM_ENCHANTMENT_TYPE_USE_SPELL        = 7,
    ITEM_ENCHANTMENT_TYPE_PRISMATIC_SOCKET = 8
};

		
#define MAX_ITEM_ENCHANTMENT_EFFECTS 3		
struct ItemRandomPropertiesEntry
{
    uint32    ID;                                           // 0        m_ID
    //char*     internalName                                // 1        m_Name
    uint32    enchant_id[MAX_ITEM_ENCHANTMENT_EFFECTS];     // 2-4      m_Enchantment
                                                            // 5-6      unused
    char*     nameSuffix[16];                               // 7-22     m_name_lang
                                                            // 23 name flags
};

struct ItemRandomSuffixEntry
{
    uint32    ID;                                           // 0        m_ID
    char*     nameSuffix[16];                               // 1-16     m_name_lang
                                                            // 17, name flags
                                                            // 18       m_internalName
    uint32    enchant_id[MAX_ITEM_ENCHANTMENT_EFFECTS];     // 19-21    m_enchantment
    //uint32    unk1[2]                                     // 22-23    unknown
    uint32    prefix[MAX_ITEM_ENCHANTMENT_EFFECTS];         // 24-26    m_allocationPct
    //uint32    unk2[2]                                     // 27-28    unknown
};		

struct SpellItemEnchantmentEntry
{
    uint32      ID;                                         // 0        m_ID
    //uint32      charges;                                  // 1        m_charges
    uint32      type[MAX_ITEM_ENCHANTMENT_EFFECTS];         // 2-4      m_effect[MAX_ITEM_ENCHANTMENT_EFFECTS]
    uint32      amount[MAX_ITEM_ENCHANTMENT_EFFECTS];       // 5-7      m_effectPointsMin[MAX_ITEM_ENCHANTMENT_EFFECTS]
    //uint32      amount2[MAX_ITEM_ENCHANTMENT_EFFECTS]     // 8-10     m_effectPointsMax[MAX_ITEM_ENCHANTMENT_EFFECTS]
    uint32      spellid[MAX_ITEM_ENCHANTMENT_EFFECTS];      // 11-13    m_effectArg[MAX_ITEM_ENCHANTMENT_EFFECTS]
    char*       description[16];                            // 14-29    m_name_lang[16]
    //uint32      descriptionFlags;                         // 30 name flags
    uint32      aura_id;                                    // 31       m_itemVisual
    uint32      slot;                                       // 32       m_flags
    uint32      GemID;                                      // 33       m_src_itemID
    uint32      EnchantmentCondition;                       // 34       m_condition_id
    uint32      requiredSkill;                              // 35       m_requiredSkillID
    uint32      requiredSkillValue;                         // 36       m_requiredSkillRank
    uint32      requiredLevel;                              // 37       m_requiredLevel
};

struct SpellItemEnchantmentConditionEntry
{
    uint32  ID;                                             // 0        m_ID
    uint8   Color[5];                                       // 1-5      m_lt_operandType[5]
    //uint32  LT_Operand[5];                                // 6-10     m_lt_operand[5]
    uint8   Comparator[5];                                  // 11-15    m_operator[5]
    uint8   CompareColor[5];                                // 15-20    m_rt_operandType[5]
    uint32  Value[5];                                       // 21-25    m_rt_operand[5]
    //uint8   Logic[5]                                      // 25-30    m_logic[5]
};

struct GemPropertiesEntry
{
    uint32      ID;
    uint32      spellitemenchantement;
    uint32      color;
};